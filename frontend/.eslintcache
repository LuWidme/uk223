[{"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\index.tsx":"1","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\App.tsx":"2","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Router\\Router.tsx":"3","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Contexts\\ActiveUserContext.tsx":"4","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\config\\Api.ts":"5","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Services\\AuthorityService.ts":"6","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Services\\UserService.ts":"7","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Router\\PrivateRoute.tsx":"8","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\HomePage.tsx":"9","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\LoginPage\\LoginPage.tsx":"10","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Atoms\\Text.tsx":"11","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Molecules\\GroupDisplay.tsx":"12","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Atoms\\RoundImg.tsx":"13","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Molecules\\User.tsx":"14","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Atoms\\ActiveButton.tsx":"15"},{"size":382,"mtime":1667376502211,"results":"16","hashOfConfig":"17"},{"size":316,"mtime":1667376502200,"results":"18","hashOfConfig":"17"},{"size":1403,"mtime":1667376502203,"results":"19","hashOfConfig":"17"},{"size":6322,"mtime":1667376502201,"results":"20","hashOfConfig":"17"},{"size":1843,"mtime":1667400416752,"results":"21","hashOfConfig":"17"},{"size":1174,"mtime":1667376502205,"results":"22","hashOfConfig":"17"},{"size":808,"mtime":1667376502207,"results":"23","hashOfConfig":"17"},{"size":2265,"mtime":1667376502202,"results":"24","hashOfConfig":"17"},{"size":64,"mtime":1667403014827,"results":"25","hashOfConfig":"17"},{"size":3320,"mtime":1667376502209,"results":"26","hashOfConfig":"17"},{"size":833,"mtime":1667395349090,"results":"27","hashOfConfig":"17"},{"size":650,"mtime":1667395329021,"results":"28","hashOfConfig":"17"},{"size":291,"mtime":1667396103129,"results":"29","hashOfConfig":"17"},{"size":853,"mtime":1667396232008,"results":"30","hashOfConfig":"17"},{"size":437,"mtime":1667399159194,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"4ijd62",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\index.tsx",[],["68","69"],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\App.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Router\\Router.tsx",["70","71"],"import React, { useContext } from 'react';\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport LoginPage from '../components/pages/LoginPage/LoginPage';\r\nimport ActiveUserContext from '../Contexts/ActiveUserContext';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport HomePage from '../components/pages/HomePage';\r\n\r\n/**\r\n * Router component renders a route switch with all available pages\r\n */\r\n\r\nconst Router = () => {\r\n  //const { checkRole } = useContext(ActiveUserContext);\r\n\r\n  /** navigate to different \"home\"-locations depending on Role the user have */\r\n\r\n  return (\r\n    <Routes>\r\n      <Route path={'/'} element={<HomePage />} />\r\n      <Route path={'/login'} element={<LoginPage />} />\r\n\r\n      <Route\r\n        path={'/users'}\r\n        element={\r\n          <PrivateRoute authorities={[]} element={<div>nothing here</div>} />\r\n        }\r\n      />\r\n      <Route\r\n        path='/users/:userId'\r\n        element={\r\n          <PrivateRoute\r\n            authorities={[]}\r\n            element={<div>nothing here</div>}\r\n          ></PrivateRoute>\r\n        }\r\n      />\r\n\r\n      <Route\r\n        path='/profile'\r\n        element={\r\n          <PrivateRoute\r\n            authorities={[]}\r\n            element={<div>nothing here</div>}\r\n          ></PrivateRoute>\r\n        }\r\n      />\r\n\r\n      <Route path='*' element={<div>Not Found</div>} />\r\n    </Routes>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Contexts\\ActiveUserContext.tsx",["72"],"import { createContext, useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport api from '../config/Api';\r\nimport roles from '../config/Roles';\r\nimport AuthorityService from '../Services/AuthorityService';\r\nimport UserService from '../Services/UserService';\r\nimport { User } from '../types/models/User.model';\r\nimport { Nullable } from '../types/Nullable';\r\n\r\n/**\r\n * USER_DATA_LOCAL_STORAGE_KEY defines the localStorageKey in which the\r\n * activeUser gets stored.\r\n */\r\nexport const USER_DATA_LOCAL_STORAGE_KEY = 'user';\r\nexport const TOKEN_LOCAL_STORAGE_KEY = 'token';\r\n\r\n/**\r\n * ActiveUserContextType defines the provided values\r\n */\r\nexport type ActiveUserContextType = {\r\n  user: Nullable<User>;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  logout: () => void;\r\n  setActiveUser: (user: User) => void;\r\n  loadActiveUser: () => void;\r\n  checkRole: (roleToCheck: keyof typeof roles) => boolean;\r\n};\r\n\r\n/**\r\n * noContextProviderFound is a method that throws an error and is used\r\n * inside the defaultContextValue\r\n */\r\nconst noContextProviderFound = () => {\r\n  throw new Error('No provider for the ActiveUserContext found');\r\n};\r\n\r\n/**\r\n * defaultContextValue defines the default values for the ActiveUserContext.\r\n */\r\nconst defaultContextValue: ActiveUserContextType = {\r\n  user: null,\r\n  login: noContextProviderFound,\r\n  logout: noContextProviderFound,\r\n  setActiveUser: noContextProviderFound,\r\n  loadActiveUser: noContextProviderFound,\r\n  checkRole: noContextProviderFound,\r\n};\r\n\r\n/**\r\n * ActiveUserContext has the purpose of providing the currently active user\r\n * as well as related values, modifiers and related operations such as login\r\n * and logout.\r\n */\r\nconst ActiveUserContext =\r\n  createContext<ActiveUserContextType>(defaultContextValue);\r\nexport default ActiveUserContext;\r\n\r\n/**\r\n * Props for the ActiveUserContextProvider Component\r\n */\r\ntype ActiveUserContextProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\n/**\r\n * ActiveUserContextProvider Component is used to provide the ActiveUserContext\r\n * to all child-components.\r\n * @param children consists of all the elements that are located inside the\r\n */\r\nexport const ActiveUserContextProvider = ({\r\n  children,\r\n}: ActiveUserContextProviderProps) => {\r\n  /**\r\n   * Try to load the user data that is stored inside the LocalStorage.\r\n   * If non is present, null will be returned.\r\n   */\r\n  const loadSavedUserData = (): Nullable<User> => {\r\n    const storeUser = localStorage.getItem(USER_DATA_LOCAL_STORAGE_KEY);\r\n    if (storeUser === null) return null;\r\n    return JSON.parse(storeUser);\r\n  };\r\n\r\n  // The following line defines the user state which is holding the user\r\n  // data inside this context.\r\n  const [user, setUser] = useState<Nullable<User>>(() => loadSavedUserData());\r\n  const navigate = useNavigate();\r\n  /**\r\n   * Update the user that is provided by the ActiveUserContext\r\n   * @param updatedUser\r\n   */\r\n  const setActiveUser = (updatedUser: User) => {\r\n    setUser(updatedUser);\r\n    localStorage.setItem(\r\n      USER_DATA_LOCAL_STORAGE_KEY,\r\n      JSON.stringify(updatedUser)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Remove all user and authorization related data from the localStorage\r\n   */\r\n  const resetAuthorization = () => {\r\n    // Reset the stored data inside the AuthorityService.\r\n    AuthorityService.clearAuthorities();\r\n    // Clear all data from the localStorage.\r\n    localStorage.clear();\r\n    // Set the user, which is stored inside the context to null.\r\n    setUser(null);\r\n  };\r\n\r\n  /**\r\n   * Logout the currently active user by resetting the stored user data\r\n   * and redirecting to the LoginPage.\r\n   */\r\n  const logout = () => {\r\n    // If no token is saved inside the local storage clear the localStorage directly\r\n    if (localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY) === null) {\r\n      resetAuthorization();\r\n      return;\r\n    }\r\n    // If a token is present send a logout-request and clear the localStorage afterwards\r\n    api.get('/logout').finally(resetAuthorization);\r\n    //navigate to login page\r\n    navigate('/login');\r\n  };\r\n\r\n  /**\r\n   * Login with the provided credentials. If successful the current user gets\r\n   * updated and stored inside the context. Also the JWT-Token for further\r\n   * request based authentication is stored inside the localStorage.\r\n   * @param email\r\n   * @param password\r\n   */\r\n  const login = async (email: string, password: string) => {\r\n    await api.post('user/login', { email, password }).then((response: any) => {\r\n      console.log(response.headers.authorization);\r\n      localStorage.setItem(\r\n        TOKEN_LOCAL_STORAGE_KEY,\r\n        response.headers.authorization\r\n      );\r\n      setActiveUser(response.data);\r\n      return true;\r\n    });\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Request the user data for the currently active user from the api\r\n   * and save it to the context-state.\r\n   */\r\n  const loadActiveUser = () => {\r\n    return user\r\n      ? UserService.getUser(user.id).then((res: any) => {\r\n          setActiveUser(res.data);\r\n        })\r\n      : null;\r\n  };\r\n\r\n  function activeUserHasRole(roleToCheck: keyof typeof roles): boolean {\r\n    return user ? user.roles.some((role) => role.name === roleToCheck) : false;\r\n  }\r\n\r\n  /**\r\n   * Try to load the user-object from the localStorage if present.\r\n   * This is done automatically on the first render of this component.\r\n   */\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY);\r\n    if (token !== null) {\r\n      loadActiveUser();\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * If the user state is updated and the user is not equal to null,\r\n   * the data used in the AuthorityService as well as the data stored inside\r\n   * the localStorage will be updated with the new user-data.\r\n   */\r\n  useEffect(() => {\r\n    if (user !== null) {\r\n      AuthorityService.initAuthoritySet(user);\r\n      localStorage.setItem(USER_DATA_LOCAL_STORAGE_KEY, JSON.stringify(user));\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <div>\r\n      <ActiveUserContext.Provider\r\n        value={{\r\n          user,\r\n          setActiveUser,\r\n          login,\r\n          logout,\r\n          loadActiveUser,\r\n          checkRole: activeUserHasRole,\r\n        }}\r\n      >\r\n        {children}\r\n      </ActiveUserContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\config\\Api.ts",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Services\\AuthorityService.ts",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Services\\UserService.ts",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Router\\PrivateRoute.tsx",["73"],"import React, { useContext } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport ActiveUserContext from '../Contexts/ActiveUserContext';\r\nimport AuthorityService from '../Services/AuthorityService';\r\nimport { Authority } from '../types/models/Authority.model';\r\n\r\ninterface Props {\r\n  element: React.ReactElement;\r\n  authorities: Authority[];\r\n}\r\n\r\ntype JWTType = {\r\n  iss: string;\r\n  exp: number;\r\n};\r\n\r\nconst PrivateRoute: React.FC<Props> = ({\r\n  element: RouteComponent,\r\n  authorities: authorities,\r\n}) => {\r\n  const activeUserContext = useContext(ActiveUserContext);\r\n  /**\r\n   * isLoggedIn checks if the token, which is saved inside the localStorage,\r\n   * exists, isn't expired yet and has been issued by the correct issuer.\r\n   * If all of the above is true the user is seen as logged in.\r\n   */\r\n  const isLoggedIn = () => {\r\n    let tokenString = localStorage.getItem('token');\r\n    if (!tokenString) {\r\n      console.error('no token found');\r\n      return false;\r\n    }\r\n    tokenString = tokenString.replace('Bearer ', '');\r\n    const token: JWTType = jwt.decode(tokenString) as JWTType;\r\n    // Check if token does not exist or doesn't have an expiration claim or is expired.\r\n    if (!token || !token.exp || token.exp < Date.now() / 1000) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n  /**\r\n   * If the user is not logged in call activeUserContext.logout, which destroys\r\n   * all locally saved user data and redirects to /login.\r\n   */\r\n  if (!isLoggedIn()) {\r\n    activeUserContext.logout();\r\n    return <Navigate to='/login' replace={true} />;\r\n  }\r\n  /**\r\n   * Check if the active user has at least 1 of the needed authorities.\r\n   * If no authorities are needed true is returned.\r\n   */\r\n  const hasNeededAuthorities =\r\n    authorities.length === 0 || authorities.some(AuthorityService.hasAuthority);\r\n\r\n  /**\r\n   * If the user doesn't possess the needed authorities Redirect the user to\r\n   * /unauthorized\r\n   */\r\n  if (!hasNeededAuthorities) {\r\n    return <Navigate to='/unauthorized' replace={true} />;\r\n  }\r\n\r\n  // All checks passed\r\n  return (\r\n    // Pagelayout puts the Navigation, Menu etc. around the component\r\n    RouteComponent\r\n  );\r\n};\r\nexport default PrivateRoute;\r\n","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\HomePage.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\LoginPage\\LoginPage.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Atoms\\Text.tsx",[],["74","75"],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Molecules\\GroupDisplay.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Atoms\\RoundImg.tsx",["76"],"import React from \"react\";\r\n\r\ninterface ImageData {\r\n  logo: string;\r\n}\r\nconst imageStyle: React.CSSProperties = {\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n  borderRadius: \"50%\",\r\n};\r\n\r\nexport function RoundImg(props: ImageData) {\r\n  return <img style={imageStyle} src={props.logo}></img>;\r\n}\r\n","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Molecules\\User.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Atoms\\ActiveButton.tsx",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":1,"column":17,"nodeType":"83","messageId":"84","endLine":1,"endColumn":27},{"ruleId":"81","severity":1,"message":"85","line":4,"column":8,"nodeType":"83","messageId":"84","endLine":4,"endColumn":25},{"ruleId":"86","severity":1,"message":"87","line":172,"column":6,"nodeType":"88","endLine":172,"endColumn":8,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":20,"column":3,"nodeType":"92","messageId":"93","endLine":20,"endColumn":27,"fix":"94"},{"ruleId":"77","replacedBy":"95"},{"ruleId":"79","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":13,"column":10,"nodeType":"99","endLine":13,"endColumn":51},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"@typescript-eslint/no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'ActiveUserContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadActiveUser'. Either include it or remove the dependency array.","ArrayExpression",["102"],"no-useless-rename","Destructuring assignment authorities unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"103","text":"104"},["100"],["101"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},[531,555],"authorities","Update the dependencies array to be: [loadActiveUser]",{"range":"107","text":"108"},[5566,5568],"[loadActiveUser]"]